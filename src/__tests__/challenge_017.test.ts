import type * as Challenge017 from "../challenges/challenge_017";

const { ErrorEnum, solution } = jest.requireActual<typeof Challenge017>(
  "../challenges/challenge_017.ts"
);

const successCases = [
  {
    id: 0,
    input: {
      W: 5,
      H: 5,
      t1: 1,
      t2: 2,
      t3: 3,
      pictureRows: [
        "A.... .A...",
        "..... .....",
        "..... .....",
        "..... .....",
        "..... .....",
      ],
    },
    output: ["..A..", ".....", ".....", ".....", "....."],
  },
  {
    id: 1,
    input: {
      W: 5,
      H: 5,
      t1: 1,
      t2: 2,
      t3: 3,
      pictureRows: [
        "A.... .....",
        "..... A....",
        "..... .....",
        "..... .....",
        "..... .....",
      ],
    },
    output: [".....", ".....", "A....", ".....", "....."],
  },
  {
    id: 2,
    input: {
      W: 5,
      H: 5,
      t1: 1,
      t2: 2,
      t3: 3,
      pictureRows: [
        "A.... .....",
        "..... .A...",
        "..... .....",
        "..... .....",
        "..... .....",
      ],
    },
    output: [".....", ".....", "..A..", ".....", "....."],
  },
  {
    id: 3,
    input: {
      W: 5,
      H: 5,
      t1: 1,
      t2: 2,
      t3: 3,
      pictureRows: [
        "..... .....",
        "..... .A...",
        "..A.. .....",
        "..... .....",
        "..... .....",
      ],
    },
    output: ["A....", ".....", ".....", ".....", "....."],
  },
  {
    id: 4,
    input: {
      W: 6,
      H: 6,
      t1: 1,
      t2: 5,
      t3: 6,
      pictureRows: [
        "A..... ....A.",
        "...... ......",
        "...... ......",
        "...... ......",
        "...... ......",
        "...... ......",
      ],
    },
    output: [".....A", "......", "......", "......", "......", "......"],
  },
  {
    id: 5,
    input: {
      W: 6,
      H: 6,
      t1: 1,
      t2: 3,
      t3: 5,
      pictureRows: [
        "A..... .A....",
        "...... B.....",
        "B..... ......",
        "...... ......",
        "...... ......",
        "...... ......",
      ],
    },
    output: ["B.A...", "......", "......", "......", "......", "......"],
  },
  {
    id: 6,
    input: {
      W: 6,
      H: 6,
      t1: 1,
      t2: 6,
      t3: 11,
      pictureRows: [
        "..H... ......",
        "...... ..H...",
        "E...G. .E.G..",
        "...... ..F...",
        "..F... ......",
        "...... ......",
      ],
    },
    output: ["......", "......", "..E...", "......", "......", "......"],
  },
  {
    id: 7,
    input: {
      W: 5,
      H: 5,
      t1: 0,
      t2: 1255,
      t3: 9999,
      pictureRows: [
        "..... .....",
        ".A... .A...",
        "..... .....",
        "...D. ...D.",
        "..... .....",
      ],
    },
    output: [".....", ".A...", ".....", "...D.", "....."],
  },
  {
    id: 8,
    input: {
      W: 10,
      H: 10,
      t1: 100,
      t2: 200,
      t3: 300,
      pictureRows: [
        "A......... .A........",
        "B......... ..B.......",
        "C......... ...C......",
        "D......... ....D.....",
        "E......... .....E....",
        ".........F ........F.",
        ".........G .......G..",
        ".........H ......H...",
        ".........I .....I....",
        ".........J ....J.....",
      ],
    },
    output: [
      "..A.......",
      "....B.....",
      "......C...",
      "........D.",
      "..........",
      ".......F..",
      ".....G....",
      "...H......",
      ".I........",
      "..........",
    ],
  },
  {
    id: 9,
    input: {
      W: 20,
      H: 20,
      t1: 25,
      t2: 75,
      t3: 100,
      pictureRows: [
        ".................O.. G...................",
        ".....N...........U.. ...............W....",
        ".............L.R.... ...................C",
        ".................... ...E................",
        "..........Z..V.H.... ..............K.....",
        "................X... ...........T........",
        ".............P...... ............A.......",
        ".............A...... .....P...FLI......N.",
        ".Q.............T.... ....................",
        "..................F. ........D...........",
        ".................... ......S..Y.........M",
        "......K............W .........B....Z.....",
        "...............Y.... ....................",
        "..............S..... ....V.............J.",
        "...........JE......D .........O..........",
        "...M................ ..X...........U.....",
        "......B..G...C....I. ....................",
        ".................... ....................",
        ".................... ..Q................R",
        ".................... .......H............",
      ],
    },
    output: [
      "..................K.",
      "....................",
      ".......I............",
      ".........T..........",
      "....................",
      "...........A........",
      "..D.F...............",
      ".P..................",
      "..S.......B.........",
      "......Y.L...........",
      "....................",
      "....................",
      "....................",
      "....................",
      "................Z...",
      "....................",
      "....................",
      "....................",
      "....................",
      "....................",
    ],
  },
];

const failureCases = [
  {
    id: 0,
    input: {
      W: 0,
      H: 5,
      t1: 1,
      t2: 2,
      t3: 3,
      pictureRows: [
        "A.... .A...",
        "..... .....",
        "..... .....",
        "..... .....",
        "..... .....",
      ],
    },
    error: ErrorEnum.OUT_OF_RANGE_W,
  },
  {
    id: 1,
    input: {
      W: 5,
      H: 21,
      t1: 1,
      t2: 2,
      t3: 3,
      pictureRows: [
        "A.... .A...",
        "..... .....",
        "..... .....",
        "..... .....",
        "..... .....",
      ],
    },
    error: ErrorEnum.OUT_OF_RANGE_H,
  },
  {
    id: 2,
    input: {
      W: 5,
      H: 5,
      t1: 3,
      t2: 2,
      t3: 3,
      pictureRows: [
        "A.... .A...",
        "..... .....",
        "..... .....",
        "..... .....",
        "..... .....",
      ],
    },
    error: ErrorEnum.OUT_OF_RANGE_T1,
  },
  {
    id: 3,
    input: {
      W: 5,
      H: 5,
      t1: 1,
      t2: 4,
      t3: 3,
      pictureRows: [
        "A.... .A...",
        "..... .....",
        "..... .....",
        "..... .....",
        "..... .....",
      ],
    },
    error: ErrorEnum.OUT_OF_RANGE_T2,
  },
  {
    id: 4,
    input: {
      W: 5,
      H: 5,
      t1: 1,
      t2: 2,
      t3: 10001,
      pictureRows: [
        "A.... .A...",
        "..... .....",
        "..... .....",
        "..... .....",
        "..... .....",
      ],
    },
    error: ErrorEnum.OUT_OF_RANGE_T3,
  },
  {
    id: 5,
    input: {
      W: 5,
      H: 5,
      t1: 1,
      t2: 2,
      t3: 3,
      pictureRows: [
        "A...... .A.....",
        "..... .....",
        "..... .....",
        "..... .....",
        "..... .....",
      ],
    },
    error: ErrorEnum.INVALID_PICTURE_ROWS,
  },
];

describe("test challenge 017", () => {
  it.each(successCases)("success case $id", ({ input, output }) => {
    const { W, H, t1, t2, t3, pictureRows } = input;

    expect(solution(W, H, t1, t2, t3, pictureRows)).toEqual(output);
  });

  it.each(failureCases)("failure case $id", ({ input, error }) => {
    const { W, H, t1, t2, t3, pictureRows } = input;

    expect(() => solution(W, H, t1, t2, t3, pictureRows)).toThrow(error);
  });
});
