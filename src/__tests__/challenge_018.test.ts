import type * as Challenge018 from "../challenges/challenge_018";

const { ErrorEnum, solution } = jest.requireActual<typeof Challenge018>(
  "../challenges/challenge_018.ts"
);

const successCases = [
  {
    id: 0,
    input: { encoded: "0 0 00 00000 0 0" },
    output: "A",
  },
  {
    id: 1,
    input: { encoded: "0 0 00 00000 0 00 00 00000 0 0" },
    output: "AA",
  },
  {
    id: 2,
    input: {
      encoded:
        "0 0 00 0000 0 0 00 0 0 000 00 00 0 0 00 0 0 000 00 0 0 0 00 0 0 000 00 000 0 0000 00 00 0 0 00 0 0 0 00 0 0 0 00 00000 0 0 00 00 0 00 00 00 0 00 00 00 0 0 00 0 0 000 00 00 0 0 00 0 0 0",
    },
    output: "Bruce Lee",
  },
  {
    id: 3,
    input: {
      encoded:
        "0 0 00 0000 0 0 00 0 0 000 00 00 0 0 00 0 0 000 00 0 0 0 00 0 0 000 00 000 0 0000 00 00 0 0 00 0 0 0 00 0 0 0 00 00000 0 0 00 00 0 00 00 00 0 00 00 00 0 0 00 0 0 000 00 00 0 0 00 0 0 0 00 0 0 0 00 00000 0 000 00 0 0 00 00 0 0 000 00 00 0 00 00 0 0 0 00 00000 0 0 00 0000 0 0000 00 0 0 0 00 000 0 000 00 0 0 0 00 0 0 000 00 000 0 0000 00 0 0 0 00 0 0 00 00 0 0 0 00 00000 0 0 00 00 0 000 00 0 0 00 00 0 0 0000000 00 00 0 0 00 0 0 000 00 00 0 0 00 0 0 00 00 0 0 0 00 00 0 0000 00 00 0 00",
    },
    output: "Bruce Lee vs Chuck Norris",
  },
  {
    id: 4,
    input: { encoded: "Bruce Lee" },
    output: "INVALID",
  },
  {
    id: 5,
    input: {
      encoded:
        "0 0 00 00 0 0 00 00 0 0000 00 0 0 0 00 000 0 0 00 00000 0 00 00 0 0 0 00 00 0 0000 00 00 0 00 00 0 0 0 00 00000 0 00 00 000 0 0000 00 0 0 000000 00 0 0 000 00 0 0 000 00 00 0 0000 00 0 0 0 00 00 0 000 00 00 0 0 00 00 0 00 00 00 0 0 00 0 0 0000 00 00 0 0 00 0 0 00 00 00 0 0 00 0 0 000 00 00 0 0 00 000 0 0 00 00000 0 00 00 0000 0 0 00 0 0 0 00 00000 0 00 00 00 0 000000 00 00 0 0 00 0 0 00 00 00 0 0 00 0 0 000 00 0000 0 0000 00 0 0 0 00 000 0 0 00 00000 0 00 00 0000 0 000 00 000 0 0000 00 000 0 0000 00 0 0 000000 00 0 0 00 00 0 0 0000 00 0000 0 00 00 0 0 00 00 00 0 00 00 0 0 0 00 00 0 0000 00 00 0 0000 00 0 0 0 00 000 0 00 00 0 0 00 00 0 0 000 00 00 0 0 00 0 0 000 00 0 0 000 00 0 0 000 00 0 0 0 00 000 0 0 00 00000 0 000 00 0 0 0 00 00 0 00 00 0 0 0000 00 0 0 0 00 00000 0 00 00 00 0 00000 00 0 0 0000 00 0 0 0 00 00000 0 00 00 00 0 0 00 00 0 00 00 0 0 0000000 00 0 0 00000 00 0 0 000 00 00 0 0 00 00000 0 0 00 00 0 000 00 0 0 00 00 0 0 0 00 00 0 000 00 0000 0 000 00 00 0 00000 00 0000 0 0000 00 00 0 0 00 0 0 00 00 0000 0 0 00 0 0 0 00 00000 0 0 00 000 0 00 00 0 0 00 00 0000 0 000 00 0 0 00 00 00 0 00 00 0 0 00 00 00 0 000 00 00 0 00 00 0 0 0 00 00000 0 00 00 0 0 0 00 00 0 000 00 0 0 000 00 00 0 0 00 00000 0 00 00 0000 0 0 00 0 0 0 00 00000 0 000 00 0 0 00000 00 0 0 000000 00 0 0 000000 00 00 0 0 00 00 0 00 00 00 0 0 00 0 0 000 00 0 0 000 00 00 0 0 00 00000 0 00 00 000 0 0 00 0 0 00 00 0000 0 0000 00 00 0 0 00 0 0 000 00 00 0 0 00 0 0 00 00 00 0 0 00 0 0 000 00 0 0 00 00 000 0 0 00 0 0 000 00 00 0 0 00 00000 0 0 00 0000 0 0000 00 0 0 0 00 000 0 000 00 0 0 0 00 0 0 000 00 000 0 0000 00 0 0 0 00 0 0 00 00 0 0 0 00 00000 0 0 00 00 0 000 00 0 0 00 00 0 0 0000000 00 00 0 0 00 0 0 000 00 00 0 0 00 0 0 00 00 0 0 0 00 00 0 0000 00 00 0 00 00 0 0 0 00 00000 0 00 00 000 0 0000 00 0000 0 000 00 0 0 000 00 00 0 0 00 00000 0 00 00 00 0 00000 00 0 0 0000 00 0 0 0 00 00000 0 000 00 0 0 0 00 0 0 0000 00 00000 0 0 00 00000 0 0 00 00 0 000 00 0 0 00 00 0 0 0 00 00 0 000 00 0000 0 000 00 00 0 00000 00 0000 0 0000 00 00 0 0 00 0 0 00 00 0000 0 0 00 0 0 0 00 00000 0 0 00 000 0 00 00 0 0 00 00 0000 0 000 00 0 0 00 00 00 0 00 00 0 0 00 00 00 0 000 00 00 0 00 00 0 0 0 00 00000 0 00 00 0 0 0 00 00 0 000 00 0 0 000 00 00 0 0 00 00000 0 00 00 0000 0 0 00 0 0 0 00 00000 0 00 00 000 0 0000 00 0000 0 0000 00 00 0 0 00 0 0 00 00 00 0 0 00 00 0 00 00 000 0 0 00 0 0 00 00 0 0 000000 00 0000 0 0000 00 00 0 0 00 0 0 00 00 00 0 0 00 000 0 0 00 00000 0 00 00 000 0 0 00 0 0 00 00 0 0 00000000 00 0000 0 0 00 0 0 000 00 0",
    },
    output:
      "It is considered a great accomplishment to go down Niagara Falls in a wooden barrel. Chuck Norris can go up Niagara Falls in a cardboard box.",
  },
  {
    id: 6,
    input: {
      encoded:
        "00 0 0 0 00 00 0 0 00 0 0 0 00 0 0 0 00 0 0 0 00 0 0 0 00 00 0 0 00 000 0 00 00 0 0 00 00 0000",
    },
    output: "%*#0",
  },
  {
    id: 7,
    input: { encoded: "0 0 00 00 0 0 00 00 0 0000 00 0 and it's not valid..." },
    output: "INVALID",
  },
  {
    id: 8,
    input: { encoded: "0 0 00 00000 000 0" },
    output: "INVALID",
  },
  {
    id: 9,
    input: { encoded: "0 0 00 00000 00" },
    output: "INVALID",
  },
  {
    id: 10,
    input: { encoded: "0 0 00 0000 0 0" },
    output: "INVALID",
  },
];

const failureCases = [
  {
    id: 0,
    input: { encoded: "" },
    error: ErrorEnum.OUT_OF_RANGE_ENCODED,
  },
];

describe("test challenge 018", () => {
  it.each(successCases)("success case $id", ({ input, output }) => {
    expect(solution(input.encoded)).toBe(output);
  });

  it.each(failureCases)("failure case $id", ({ input, error }) => {
    expect(() => solution(input.encoded)).toThrow(error);
  });
});
